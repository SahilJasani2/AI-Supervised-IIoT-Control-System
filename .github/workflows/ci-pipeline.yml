# Name of your CI/CD pipeline
name: Python and Docker CI Pipeline

# This pipeline runs on every push to the 'main' branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --- First Job: Lint Python Code ---
  lint:
    # This job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository code so the workflow can access it
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Add caching for pip dependencies
      # This step will save the downloaded libraries to speed up future runs.
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          # The path to the cache directory
          path: ~/.cache/pip
          # The key for the cache. If requirements.txt changes, a new cache is created.
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r src/requirements.txt

      # Step 5: Run the linter to check for errors and style issues
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # --- Second Job: Verify Docker Build ---
  build-docker:
    # This job also runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # This job will only start after the 'lint' job has finished successfully
    needs: lint

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Build the Docker images to verify everything is configured correctly
      - name: Build Docker images
        run: docker compose build
